
* Why Use Machine Learning?
** What is Machine Learning?
While at IBM, Arthur Samuel developed a program that learned how to play checkers (1959). He called it:
#+begin_quote
/"The fiel of study that gives computers the ability to learn without being explicitly programmed."/
#+end_quote
What does this means?

As programmers, we often approach problems in a methodical, logic-based way. We try to determine what our desired outputs should be, and then create the proper rules that will transform our inputs into those outputs.

Machine learning flips the script. We want the program itself to learn the rules that describe our data the best, by findign patterns in what we know and applying those patterns to what we don't know.

These algorithms are able to learn. Their performance gets better and better with each iteration, as it uncovers more hidden trends in the data.

Since Mr. Samuel's usage of the term, we have made astonishing advances in the field!

#+begin_quote
Arthur Lee Samuel (December 5, 1901 – July 29, 1990) was an American pioneer in the field of computer gaming and artificial intelligence. He popularized the term "machine learning" in 1959. The Samuel Checkers-playing Program was among the world's first successful self-learning programs, and as such a very early demonstration of the fundamental concept of artificial intelligence (AI). He was also a senior member in the TeX community who devoted much time giving personal attention to the needs of users and wrote an early TeX manual in 1983.
#+end_quote

#+CAPTION: Since Mr. Samuel’s usage of the term, we have made astonishing advances in the field!
#+NAME: Since Arthur Samuel (1949)
[[./since arthur.png]]

** Supervised Learning: Regression
Machine learning can be branched out into the following categories:

    - Supervised learning
    - Unsupervised learning

Supervised Learning is where the data is *labeled* and the program learns to predict the output from the input data. For instance, a supervised learning algorithm for credit card fraud detection would take as input a set of recorded transactions. For each transaction, the program would predict if it is fraudulent or not.

Supervised learning problems can be further grouped into regression and classification problems.

*** Regression
In regression problems, we are trying to predict a *continous-valued* output. Examples are:

    - What is the housing price in New York?
    - What is the value of criptocurrencies?

*** Classification
In classification problems, we are trying to predict a *discrete number of values*. Examples are:

    - Is this a picture of a human or a picture of a cyborg?
    - Is this email spam?

For a quick preview, here's an example of a regression problem.

A real state company wants to analyze housing costs in New York. They built a linear regression model to predict rent prices from two variables: the square footage of each apartment and the number of burglaries in the apartment's neighborhood during the past year.

* Instructions (Regression)
** Task 1
Run the code to train the model and predict the monthly rent for a 950-square-foot apartment in a neighborhood with 2 burglaries in the last year.

** Task 2
Change the variables square_footage and number_of_burglaries to different values. Run the code again. How do those changes affect the predicted rent?

If you want to experiment more you can change the values to other numbers and see how that affects the predicted rent.

* Script.py (Regresion)

#+begin_src python :results output
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

# Load the data
housing_data = pd.read_csv('housing_data.csv')
X = housing_data[['Sq ft', 'Burglaries']]
y = housing_data['Rent']

# Create the model
reg = LinearRegression()

# Train the model
reg.fit(X, y)

square_footage = 1250
number_of_burglaries = 2

y_pred = reg.predict(np.array([square_footage, number_of_burglaries]).reshape(1, 2))

print(y_pred)

#+end_src

#+RESULTS:
: [2962.382194]

* Supervised Learning: Classification
Now that you've seen a regression example, let's take a look at a classification example.
An exclusive nightclub in New York doesn't want to serve robots, but technology has advanced so far that it's hard for bouncers to tell humans from robots just by looking. To help the bouncers, the nightclub created a model that uses the k-nearest neighbors algorithm to distinguish between humans and robots based on how long it takes them identify blurry pictures or traffic lights.

* Instructions (Classification)
** Task 1
Run the code to train the model and see whether someone who identifies a picture in 5 seconds can pass as a human.

** Task 2
Change the variable time_to_identify_picture to a different value. Run the code again. Does the model still think that you’re a human?

* Script.py (Classification)

#+begin_src python :results output
import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier

# Load the data
photo_id_times = pd.read_csv('photo_id_times.csv')

# Separate the data into independent and dependent variables
X = np.array(photo_id_times['Time to id photo']).reshape(-1, 1)
y = photo_id_times['Class']

# Create a model and fit it to the data
neigh = KNeighborsClassifier(n_neighbors=3)
neigh.fit(X, y)

time_to_identify_picture = 5

# Make a prediction based on how long it takes to identify a picture
y_pred = neigh.predict(np.array(time_to_identify_picture).reshape(1, -1))

if y_pred == 1:
    print("We think you're a robot.")
else:
    print("Welcome, human!")

#+end_src

#+RESULTS:
: Welcome, human!

* Unsupervised Learning
Unsupervised Learning is a type of machine learning where the program learns the inherent structure of the data based on unlabeled examples.

Clustering is a common unsupervised machine learning approach that finds patterns and structures in unlabeled data by grouping them into clusters.

Some examples:

    - Social networks clustering topics in their news feed
    - Consumer sites clustering users for recommendations
    - Search engines to group similar objects in one cluster

For a quick preview, here's an example of unsupervised learning.

A social media platform wants to separate their users into categories based on what kind of content they engage with. They have collected three pieces of data from a sample of users:

    - Number of hours per week spent reading posts
    - Number of hours per week spent watching videos
    - Number of hours per week spent in virtual reality

The company is using an algorithm called k-means clustering to sort users into three different groups.

* Script.py (Clustering)

#+begin_src python
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from plot import plot_clusters

# Load the data
media_usage = pd.read_csv('media_usage.csv')

# Create the model
kmeans = KMeans(n_clusters=3)

# Fit the model to the data
kmeans.fit(media_usage)

labels = kmeans.predict(media_usage)

# Plot the clusters
plot_clusters(media_usage, labels)

#+end_src

#+RESULTS:
: None
