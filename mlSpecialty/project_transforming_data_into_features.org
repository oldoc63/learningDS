
* Transforming Data into Features
You are a data scientist at a clothing company and are working with a data set of customer reviews. This dataset is originally from [[https://www.kaggle.com/datasets/nicapotato/womens-ecommerce-clothing-reviews][Kaggle]] and has a lot of potential for various machine learning purposes. You are tasked with transforming some of these features to make the data more useful for analysis. To do this, you will have time to practice the following:

    - Transforming categorical data

    - Scaling your data

    - Working with date-time features

Let's get started!

* Tasks
** Basic Exploration
*** Task 1
Let's start with some basic exploring by performing the following:

First, import your dataset. It is stored under a file named reviews.csv. Saved it to a variable called reviews.

*** Task 2
Next, we want to look at the column names of our dataset along with their data types. Do the following two steps:

    - Print the column names of your dataset.

    - Check your features' data types by printing .info()

** Data Transformations
*** Task 3
Transform the recommended feature. Start by printing the feature's .value_counts()

*** Task 4
Since this is a True/False feature, we want to transform it to 1 for True and 0 for False.

To do this, create a dictionary called binary_dict where:

    - The keys are what is currently in the recommended feature.

    - The values are what we want in the new column (0s and 1s).

*** Task 5
Using binary_dict, transform the recommended column so that it will now be binary. Print the results using .value_counts() to confirm the transformation.

*** Task 6
Let's run through a similar process to transform the rating feature. This is ordinal data so our transformation should make that more clear. Again, start by printing the .value_counts()

*** Task 7
We want to make the following changes to the values:

    - Love it -> 5
    - Like it -> 4
    - Was okay -> 3
    - Not great -> 2
    - Hated it -> 1

Create a dictionary called rating_dict where the keys are what is currently in the feature and the values are what we want in the new column. You can use the hierarchy listed above to make your dictionary.

*** Task 8
Using rating_dict, transform the rating column so it contains numerical values. Print the results using .value_counts() to confirm the transformation.

*** Task 9
Let's now transform the department_name feature. This process will be slightly different, but start by printing the .value_counts() of the feature.

    - Use Panda's get_dummies to one-hot encode our feature.
    - Attach the results back to our original data frame.
    - Print the column names to see!

*** Task 10
Use panda's get_dummies() method to one-hot encode our feature. Assign this to a variable called one_hot.

*** Task 11
Join the results from one_hot back to our original data frame. Then print out the column names. What has been added?

*** Task 12
Let's make one more feature transformation!

Transform the review_date feature.

This feature is listed as an object type, but we want this to be transformed into a date-time feature.

    - Transform review_date into a date-time feature.
    - Print the feature type to confirm the transformation.
      
** Scaling the Data
*** Task 13
The final step we will take in our transformation project is scaling our data. We notice that we have a wide range of numbers thus far, so it is best to put everything on the same scale.

Let's get our data frame to only have the numerical features we created.

*** Task 14
Reset the index to be our clothing_id feature.

*** Task 15
We are ready to scale our data! Perform a .fit_transform() on our data set, and print the results to see how the features have changed.

Create a StandardScaler() and then use .fit_transform() on reviews.

* Script.py

#+begin_src python :results output
  import pandas as pd
  import numpy as np
  from sklearn.preprocessing import StandardScaler

  # import data
  reviews = pd.read_csv('reviews.csv')

  # Print the column names
  for col in reviews.columns:
      print(col)

  print(reviews.info())

  # look at the counts of recommended
  print(reviews['recommended'].value_counts())

  # create binary dictionary
  binary_dict = {True:1, False:0}

  # transform column
  reviews['recommended_binary'] = reviews['recommended'].map(binary_dict)

  # print your transformed column
  print(reviews.recommended_binary.value_counts())

  # look at the counts of rating
  print(reviews.rating.value_counts())

  # create a dictionary
  rating_dict = {'Love it':5,
                 'Like it':4,
                 'Was okay':3,
                 'Not great':2,
                 'Hated it':1}

  # transform rating column
  reviews['rating_ordinal'] = reviews['rating'].map(rating_dict)

  # print your transformed column values
  print(reviews.rating_ordinal.value_counts())

  # get the number of categories in a feature
  print(reviews.department_name.value_counts())

  # perform get_dummies
  one_hot = pd.get_dummies(reviews.department_name)

  # join the new columns back on to the original
  reviews = reviews.join(one_hot)

  # print column names
  print(reviews.columns)

  # transform review_date to date-time data
  reviews['review_date_dt'] = pd.to_datetime(reviews['review_date'])

  # print review_date data type
  print(reviews['review_date_dt'].dtype)

  # get numerical columns
  reviews = reviews[['clothing_id', 'age', 'recommended_binary', 'rating_ordinal', 'Bottoms', 'Dresses', 'Intimate', 'Jackets', 'Tops', 'Trend']].copy()

  print(reviews.head(10))


  # reset index
  reviews = reviews.set_index(reviews['clothing_id'])

  # instantiate standard scaler
  scaler = StandardScaler()

  scaler.fit_transform(reviews)

  print(reviews.head(10))

#+end_src

#+RESULTS:
#+begin_example
clothing_id
age
review_title
review_text
recommended
division_name
department_name
review_date
rating
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5000 entries, 0 to 4999
Data columns (total 9 columns):
 #   Column           Non-Null Count  Dtype 
---  ------           --------------  ----- 
 0   clothing_id      5000 non-null   int64 
 1   age              5000 non-null   int64 
 2   review_title     4174 non-null   object
 3   review_text      4804 non-null   object
 4   recommended      5000 non-null   bool  
 5   division_name    4996 non-null   object
 6   department_name  4996 non-null   object
 7   review_date      5000 non-null   object
 8   rating           5000 non-null   object
dtypes: bool(1), int64(2), object(6)
memory usage: 317.5+ KB
None
recommended
True     4166
False     834
Name: count, dtype: int64
recommended_binary
1    4166
0     834
Name: count, dtype: int64
rating
Loved it     2798
Liked it     1141
Was okay      564
Not great     304
Hated it      193
Name: count, dtype: int64
rating_ordinal
3.0    564
2.0    304
1.0    193
Name: count, dtype: int64
department_name
Tops        2196
Dresses     1322
Bottoms      848
Intimate     378
Jackets      224
Trend         28
Name: count, dtype: int64
Index(['clothing_id', 'age', 'review_title', 'review_text', 'recommended',
       'division_name', 'department_name', 'review_date', 'rating',
       'recommended_binary', 'rating_ordinal', 'Bottoms', 'Dresses',
       'Intimate', 'Jackets', 'Tops', 'Trend'],
      dtype='object')
datetime64[ns]
   clothing_id  age  recommended_binary  ...  Jackets   Tops  Trend
0         1095   39                   1  ...    False  False  False
1         1095   28                   1  ...    False  False  False
2          699   37                   1  ...    False  False  False
3         1072   36                   1  ...    False  False  False
4         1094   32                   1  ...    False  False  False
5          877   51                   1  ...    False   True  False
6          861   39                   1  ...    False   True  False
7          260   46                   1  ...    False  False  False
8          895   35                   0  ...    False   True  False
9          960   26                   0  ...     True  False  False

[10 rows x 10 columns]
             clothing_id  age  recommended_binary  ...  Jackets   Tops  Trend
clothing_id                                        ...                       
1095                1095   39                   1  ...    False  False  False
1095                1095   28                   1  ...    False  False  False
699                  699   37                   1  ...    False  False  False
1072                1072   36                   1  ...    False  False  False
1094                1094   32                   1  ...    False  False  False
877                  877   51                   1  ...    False   True  False
861                  861   39                   1  ...    False   True  False
260                  260   46                   1  ...    False  False  False
895                  895   35                   0  ...    False   True  False
960                  960   26                   0  ...     True  False  False

[10 rows x 10 columns]
#+end_example
