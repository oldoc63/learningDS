
* FetchMaker
Congratulations! You’ve just started working at the hottest new tech startup, FetchMaker. FetchMaker’s mission is to match up prospective dog owners with their perfect pet. FetchMaker has been collecting data on their adoptable dogs, and it’s your job to analyze some of that data.

** Data to the Rescue
*** Task 1
FetchMaker has provided us with data for a sample of dogs from their app, including the following attributes:
    - ~weight~, an integer representing how heavy a dog is in pounds
    - ~tail_length~, a float representing tail length in inches
    - ~age~, in years
    - ~color~, a String such as "brown" or "grey"
    - ~is_rescue~, a boolean 0 or 1

The data has been saved for you as a pandas DataFrame named dogs. Used the .head() method to inspect the first five rows of the dataset.

*** Task 2
FetchMaker estimates (based on historical data for all dogs) that 8% of dogs in their system are rescues.

They would like to know if whippets are significantly more or less likely than other dogs to be a rescue.

Store the is_rescue values for 'whippets' in a variable called whipped_rescue.

*** Task 3
How many whippets are rescues (remember that the value of is_rescue is 1 for rescues and 0 otherwise)? Save this number as num_whippet_rescues and print it out.

*** Task 4
How many whippets are in this sample of data in total? Save this number as num_whippets and print it out.

*** Task 5
Use a hypothesis test to test the following null and alternative hypotheses:
    - Null: 8% of whippets are rescues
    - Alternative: more or less than 8% of whippets are rescues

Save the p-value from this test as pval and print it out. Using a significance threshold of 0.05, Is the proportion of whippets who are rescues significantly different from 8%?

For this test, we are focused on a single binary categorical variable, which indicates whether or not each whippet is a rescue. We want to compare the number of rescues in our sample to a hypothetical population-level proportion of 0.08. Therefore, we should use a bynomial test.

First we need to import the binom_test() function:

#+begin_src python
from scipy.stats import binom_test
#+end_src

Then, we need to use the function to run our test:

#+begin_src python
pval = binom_test(x = , n = , p = )
#+end_src

In general, x is the number of  'successes', n is the sample size, and p is the null probability of 'success'.

** Mid-Sized Dog Weights
*** Task 6
Three of FetchMaker's most popular mid-sized dog breeds are 'whippet', 'terriers', and 'pitbull'. Is there a significant difference in the average weights of these three dog breeds?

To start aswering this question, save the weights of each of these breeds in three separate series named wt_whippets, wt_terriers, and wt_pitbulls, respectively.

*** Task 7
Run a single hypothesis test to address the following null and alternative hypotheses:

    - Null: whippets, terriers and pitbulls all weigh the same amount on average
    - Alternative: whippets, terriers, and pitbulls do not all weigh the same amount on average (at least one pair of breeds has differing average weights)

Save the resulting p-value as pval and print it out. Using a significance threshold of 0.05, is there at least one pair of dog breeds that have significantly different average weights?

This test addresses an association between two variables: a non-binary categorical variable (breed, with three possible options) and a quantitative variable (weight). It is not a good idea to run three separate two-sample t-test here, because running multiple t-tests increases our chances of a type 1 error, or a false positive. In order to run a single hypothesis test with three categories, we should use an ANOVA.

To do this, we first need to import the f_oneway() function:

#+begin_src python
from scipy.stats import f_oneway
#+end_src

Then, we need to input the weights of each breed.

#+begin_src python
Fstat, pval = f_oneway(___,___,___)
print(pval)
#+end_src

*** Task 8
If you complete the previous step correctly, you should have concluded that at least one pair of dog breeds have significantly different average weights.

Run another hypothesis test to determine which of those breeds (whippets, terriers and pitbulls) weigh different amounts on average. Use an overall type I error rate of 0.05 for all three comparisons. Note that we've already provided you with code in script.py to subset the data to just these breeds and have saved this subset as dogs_wtp using the showed code.

This should make it easier for you to run the test you need!

Print out the results. Which pairs of dog breeds weigh different amounts?

For this test, we need Tukey's range test, which can be implemented with pairwise_tukeyhsd. First we need to import the function. The inputs to this function are our two variables of interest: the weights and breeds of the dogs. We can use the subsetted data to pull out these variables (dogs_wtp.weight and dogs_wtp.breed), then input them into the function.

For any pair where "Reject" is "True", we conclude that those two breeds weigh significantly different amounts.

* Script.py

#+begin_src python :results output
# Import libraries
import numpy as np
import pandas as pd

# Import data
dogs = pd.read_csv('dog_data.csv')

# Subset to just whippets, terriers, and pitbulls
dogs_wtp = dogs[dogs.breed.isin(['whippet', 'terrier', 'pitbull'])]

# Subset to just poodles and shihtzus
dogs_ps = dogs[dogs.breed.isin(['poodle', 'shihtzu'])]

# Inspect first few rows of data
print(dogs.head())

# Save the is_rescue column for whippets
whippet_rescue = dogs.is_rescue[dogs.breed == 'whippet']

# How many whippets are rescues 
num_whippet_rescues = np.sum(whippet_rescue == 1)
print("Whippet rescues: ", num_whippet_rescues)

# How many whippets are in total
num_whippets = len(whippet_rescue)
print("Total of whippets: ", num_whippets)

# Run a binomial test
from scipy.stats import binomtest
pval = binomtest(num_whippet_rescues, num_whippets, 0.08)
print(pval)

# Save the weights of whippets, terriers and pitbulls
wt_whippets = dogs.weight[dogs.breed == 'whippet']
wt_terriers = dogs.weight[dogs.breed == 'terrier']
wt_pitbulls = dogs.weight[dogs.breed == 'pitbull']

# Run an ANOVA
from scipy.stats import f_oneway
Fstat, pval = f_oneway(wt_whippets, wt_terriers, wt_pitbulls)
print(pval)

# Run Tukey's range test
from statsmodels.stats.multicomp import pairwise_tukeyhsd
output = pairwise_tukeyhsd(dogs_wtp.weight, dogs_wtp.breed)
print(output)

#+end_src

#+RESULTS:
#+begin_example
   is_rescue  weight  tail_length  ...  is_hypoallergenic      name      breed
0          0       6         2.25  ...                  0      Huey  chihuahua
1          0       4         5.36  ...                  0   Cherish  chihuahua
2          0       7         3.63  ...                  1     Becka  chihuahua
3          0       5         0.19  ...                  0     Addie  chihuahua
4          0       5         0.37  ...                  1  Beverlee  chihuahua

[5 rows x 9 columns]
Whippet rescues:  6
Total of whippets:  100
BinomTestResult(k=6, n=100, alternative='two-sided', statistic=0.06, pvalue=0.5811780106238111)
3.276415588274815e-17
  Multiple Comparison of Means - Tukey HSD, FWER=0.05  
=======================================================
 group1  group2 meandiff p-adj   lower    upper  reject
-------------------------------------------------------
pitbull terrier   -13.24    0.0 -16.7278 -9.7522   True
pitbull whippet    -3.34 0.0638  -6.8278  0.1478  False
terrier whippet      9.9    0.0   6.4122 13.3878   True
-------------------------------------------------------
#+end_example
