
*  Limit Definition of the Derivative Exploration

We have discussed how to represent a function as an array and use ~np.gradient()~ to perform numerical differentiation in Python. We found that it uses a process that is fairly similar to the limit definition of a derivative.

To explore this idea more and get you familiar with the process of taking numerical derivatives, we’ll implement our own differentiation function from scratch and explore how it aligns with the limit definition of the derivative.

** Task 1
To start, let’s write a Python function that takes a mathematical function as input and uses the limit definition of a derivative to find the approximate derivate As a refresher the limit definition of the derivative is written out below:

$$
\lim_{h \to 0}\frac{f(x + h) - f(x)}{h}
$$
\\
Fill in the body of ~limit_derivative()~ so that it returns the following formula from the limit definition of a derivative:

$$
\frac{f(x + h) - f(x)}{h}
$$

#+begin_quote
*Hint*
You should have the following return statement in \\
~limit_derivative():~
~return (f(x+h) - f(x))/h~
#+end_quote

** Task 2-4
In script.py, there are three functions predefined for you:
- ~f1()~ - which defines $f1(x) = sin(x)$
- ~f2()~ - which defines $f2(x) = x^4$
- ~f3()~ - which defines $f3(x) = x^2 * log(x)$

#+begin_quote
*Note*
The default base for the math.log function is $e$, so the function defined by ~f3(x)~ in script.py is evaluated as: $f3(x) = x^2 * \ln(x)$
#+end_quote

Using the ~limit_derivative()~ function, calculate the derivative of ~f3~ at ~x=1~ using the following values of ~h~:
- h=2
- h=0.1
- h=0.00001

Make sure to print out the values. What number does the limit derivative appear to be approaching?

Using Python, we see that the value of the limit derivative of ~f3~ approaches 1 at ~x=1~. We then also showed that the derivative is equal to 1 mathematically. 

* Script.py

#+begin_src python :results output
import numpy as np

from math import sin, cos, log, pi
import matplotlib.pyplot as plt

def limit_derivative(f, x, h):
  """
  f: function to be differentiated 
  x: the point at which to differentiate f 
  h: distance between the points to be evaluated
  """
  # compute the derivative at x with limit definition
  return (f(x+h) - f(x))/h

# f1(x) = sin(x)
def f1(x):
    return sin(x)

# f2(x) = x^4
def f2(x):
    return pow(x, 4)

# f3(x) = x^2*log(x)
def f3(x):
    return pow(x, 2) * log(x)

# Calculate derivatives here
print(limit_derivative(f3, 1, 2))
print(limit_derivative(f3, 1, .1))
print(limit_derivative(f3, 1, .00001))


# Graph the true derivative
x_vals = np.linspace(1, 10, 200)
y_vals = [4*pow(val,3) for val in x_vals]
plt.figure(1)
plt.plot(x_vals, y_vals, label="True Derivative", linewidth=4)

# plot different approximated derivatives of f using limit definition of derivative
def plot_approx_deriv(f):
  x_vals = np.linspace(1, 10, 200)
  h_vals = [10, 1, .25, .01]

  for h in h_vals:
      derivative_values = []
      for x in x_vals:
          derivative_values.append(limit_derivative(f, x, h))
      plt.plot(x_vals, derivative_values, linestyle='--', label="h=" + str(h) )
  plt.legend()
  plt.title("Convergence to Derivative by varying h")
  plt.show()

plot_approx_deriv(f1)

#+end_src

#+RESULTS:
: 4.943755299006494
: 1.1532531756323319
: 1.0000150000398844
