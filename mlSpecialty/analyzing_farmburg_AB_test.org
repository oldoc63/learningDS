
* Analyzing Farmburg's A/B Test
Brian is a Product Manager at FarmBurg, a company that makes a farming simulation social network game. In the FarmBurg game, you can plow, plant, and harvest different crops. Brian has been conducting an A/B Test with three different variants, and he wants you to help him analyze the results. Using the Python modules pandas and SciPy, you will help him make some important business decisions!

** Project Requirements
*** Task 1
Brian ran an A/B test with three different groups: A, B, and C. He has provided us with a CSV file of this results named clicks.csv. It has the following columns:

    - user_id: a unique id for each visitor to the FarmBurg site
    - group: either 'A', 'B', or 'C' depending on which group the visitor was assigned to
    - is_purchase: either 'Yes' if the visitor made a purchase or 'No' if they did not.

We've already imported pandas as pd and loaded clicks.csv as abdata. Inspect the data using the .head() method.

*** Task 2
Note that we have two categorical variables: group and is_purchase. We are interested in whether visitors are more likely to make a purchase if they are in any one group compared to the others. Because we want to know if there is an association between two categorical variables, we'll start by using a Chi-Square test to address our question.

In order to run a Chi-Square test, we first need to create a contingency table of the variables group and is_purchase. Use pd.crosstab() to create this table and name the result Xtab, then print it out. Which group appears to have the highest number of purchases?

*** Task 3
To conduct the Chi-Square Test, import chi2_contingency from scipy.stats.

Then, use the function chi2_contingency with the data in Xtab to calculate the p-value. Remember that of the four values returned by chi2_contingency, the p-value is the second value.

Save the p-value to a variable named pval and print the result. Using a significance threshold of 0.05, is there a significant difference in the purchase rate for groups A, B and C?

Note that you might see a number in scientific notation. For example, 1.234e-8 is equal to 0.00000001234 (we move the decimal to the left by 8 places and insert zeros).

Therefore, the p-value is less than 0.05 and we can conclude that there is a significant difference in the purchase rate for groups A, B, and C.

*** Task 4
Our day is a little less busy than expected, so we decide to ask Brian about his test.

Us: Hey Brian! What was that test you were running anyway?

Brian: We are trying to get users to purchase a small FarmBurg upgrade package. It's called a microtransaction. We're not sure how much to charge for it, so we tested three different price points: $0.99 (group 'A'), $1.99 (group 'B'), and $4.99 (group 'C'). It looks like significantly more people bought the upgrade package for $0.99, so I guess that's what we'll charge.

Us: Oh no! We should have asked you this before we did that Chi-Square test. That wasn't the right test at all. It's true that more people wanted to purchase the upgrade at $0.99; you probable expected that. What we really want to know is whether each price point allows us to make enough money that we can exceed some target goal. Brian, how much do you think it cost to build this feature?

Brian: Hmm. I guess that we need to generate a minimum of $1000 in revenue per week in order to justify this project.

Us: We have some work to do!

In order to justify this feature, we will need to calculate the necessary purchase rate for each price point. Let's start by calculating the number of visitors to the site this week.

It turns out that Brian ran his original test over the course of a week, so the number of visitors in ~abdata~ is equal to number of visitors in a typical week. Calculate the number of visitors in the data and save the value in a variable named num_visits. Make sure to print the value.

Calculate the number of rows in the abdata dataframe.

*** Task 5
Now that we know how many visitors we generally get each week (num_visits), we need to calculate the number of visitors who would need to purchase the upgrade package at each price point ($0.99, $1.99, $4.99) in order to generate Brian's minimum revenue target of $1000 per week.

To start, calculate the number of sales that would be needed to reach $1000 dollars of revenue at a price point of $0.99. Save the result as ~num_sales_needed_099~ and print it out.

#+begin_src python
num_sales_needed_099 = 1000 / 0.99
#+end_src

*** Task 6
Now that we know how many sales we need at a $0.99 price point, calculate the *proportion* of weekly visitors who would need to make a purchase in order to meet that goal. Remember that the number of weekly visitors is saved as num_visits. Save the results as p_sales_needed_099 and print it out. 

To calculate  the proportion of visits that would need to be purchases in order to meet the $1000 weekly goal for a $0.99 price point, we divide the number of sales needed (calculated in the previous step as num_sales_needed_099) by the number of expected visits (num_visits).

*** Task 7
Repeat the steps from tasks 5 and 6 for the other price points ($1.99 and $4.99). Save the number of sales needed for each price point as num_sales_needed_199 and num_sales_needed_499, respectively. Then, save the proportion of visits needed as p_sales_needed_199 and p_sales_needed_499, respectively.

Print out the proportions. Note that for higher price points, you’ll need to sell fewer upgrade packages in order to meet your minimum revenue target — so the proportions should decrease as the price points increase.

* Script.py

#+begin_src python :results output
import pandas as pd
import numpy as np

# Read in the `clicks.csv` file as `abdata`
abdata = pd.read_csv('clicks.csv')

# Inspect the database
print(abdata.head())

# Create a contingency table with pd.crosstab
Xtab = pd.crosstab(abdata.group, abdata.is_purchase)
print(Xtab)

# Import the Chi-Square contingency module
from scipy.stats import chi2_contingency

# Calculate the p-value
chi2, pval, dof, expected = chi2_contingency(Xtab)

# Print the p-value
print(pval)

# Determine if the p-value is significant
is_significant = True

# Calculate and print the number of visits
num_visits = len(abdata)

# Print the number of visits
print(num_visits)

# Calculate the purchase rate needed at 0.99
num_sales_needed_099 = 1000/0.99
print('Num sales needed at 0.99: ', num_sales_needed_099)

p_sales_needed_099 = num_sales_needed_099 / num_visits
print('Proportion of the visits being actual purchases at 0.99: ', p_sales_needed_099)

# Calculate the purchase rate needed at 0.99
num_sales_needed_199 = 1000/1.99
print('Num sales needed at 1.99: ', num_sales_needed_199)

p_sales_needed_199 = num_sales_needed_199 / num_visits
print('Proportion of the visits being actual purchases at 1.99: ', p_sales_needed_199)

# Calculate the purchase rate needed at 0.99
num_sales_needed_499 = 1000/4.99
print('Num sales needed at 4.99: ', num_sales_needed_499)

p_sales_needed_499 = num_sales_needed_499 / num_visits
print('Proportion of the visits being actual purchases at 4.99: ', p_sales_needed_499)
#+end_src

#+RESULTS:
#+begin_example
    user_id group is_purchase
0  8e27bf9a     A          No
1  eb89e6f0     A          No
2  7119106a     A          No
3  e53781ff     A          No
4  02d48cf1     A         Yes
is_purchase    No  Yes
group                 
A            1350  316
B            1483  183
C            1583   83
2.4126213546684264e-35
4998
Num sales needed at 0.99:  1010.1010101010102
Proportion of the visits being actual purchases at 0.99:  0.20210104243717691
Num sales needed at 1.99:  502.51256281407035
Proportion of the visits being actual purchases at 1.99:  0.10054272965467594
Num sales needed at 4.99:  200.40080160320642
Proportion of the visits being actual purchases at 4.99:  0.040096198800161346
#+end_example
