
* Scientist Intern
It’s your first day working as a Data Science Intern at Codecademy! She’s excited to use some of the tools that she is learning in the Data Scientist Career Path, such as:

    - Data Literacy

    - Data extraction with SQL

    - Programming basics with Python

    - Exploratory Data Analysis with SQL and Python

    - Data analysis using pandas, a Python library

    - Data visualization using Matplotlib, a Python library

    - Experimental Design and Hypothesis Testing

You are about halfway through the Data Scientist: Machine Learning Career Path. Soon, she will either pick a different specialty or stick with Machine Learning.

Machine Learning Specialist is one of four Data Scientist Specialist career paths, each of which starts with Data Science Foundations.

* Exploring data with SQL
Like most organizations, Codecademy uses *SQL* (*S* tructured *Q* uery *L* anguage) to access its database.

A database is a collection of structured information stored so it can be easily accessed and updated. In a computer system, databases are commonly accessed through a database management system, DBMS.

A database is a set of data stored in a computer. This data is usually structured into tables. Tables can grow large and have a multitude of columns and records.

Spreadsheets, like Microsoft Excel and Google Sheets, allow you to view and manipulate data directly: with selecting, filtering, sorting, etc. By applying a number of these operations you can obtain the subset of data you are seeking.

SQL (pronounced "S-Q-L" or "sequel") allows you to write *queries* which define the subset of data you are seeking. Unlike Excel and Sheets, your computer and SQL will handle how to get the data; you can focus on what data you would like. You can save these queries, refine them, share them, and run them on different databases.

It is a great way to access data and a great entry point to programming because its syntax (the specific vocabulary that gives instructions to the computer) is very human-readable. Without knowing any SQL, your might still be able to guess what each command will do.

** Task 1
One of the tables in Codecademy's database is called browse. It contains information on each time someone visited the Codecademy's website. Pas the followin code into the code editor (middle panel) and click Run.

#+begin_src
SELECT *
FROM browse
LIMIT 10;
#+end_src

The code will select all (*) columns from browse table for the first 10 records.

** Exploring the churn rate
Next, we want to take a look at the churn rate. Churn rate is the percent of subscribers to a monthly service who have canceled. For example, in January, let’s say Codecademy had 1,000 learners. In February, 200 learners sign up, and 250 cancel.

The churn rate for February would be:

$$
\frac {cancellations}{total\ subscribers} = \frac{250}{1000 + 200} = 20.8\%
$$

You want to analyse the churn rates for Codecademy for the past few months so you write another SQL query.

#+begin_src
SELECT COUNT(DISTINCT user_id) AS 'enrollments',
  COUNT(CASE
       	WHEN strftime("%m", cancel_date) = '03'
        THEN user_id
  END) AS 'march_cancellations',
 	ROUND(100.0 * COUNT(CASE
       	WHEN strftime("%m", cancel_date) = '03'
        THEN user_id
  END) / COUNT(DISTINCT user_id)) AS 'churn_rate'
FROM pro_users
WHERE signup_date < '2017-04-01'
	AND (
    (cancel_date IS NULL) OR
    (cancel_date > '2017-03-01')
  );
#+end_src

* Programming with Python
After interacting with the database, it is time to analyse the data further and eventually visualize the data. And SQL cannot get us there.

Python is a general-purpose programming language. It can do almost all of what other languages can do with comparable, or faster, speed. It is often chosen by Data Analyst and Data Scientists for prototyping, visualization, and execution of data analyses  on datasets.

There’s an important question here. Plenty of other programming languages, like R, can be useful in the field of data science. Why are so many people choosing Python?

One major factor is Python's versatility. There are over 125,000 third-party Python libraries. These libraries make Python more useful for specific purposes, from the traditional (e.g. web development, text processing) to the cutting edge (e.g. AI and machine learning). For example, a biologist might use the [[https://biopython.org/][Biopython library]] to aid their work in genetic sequencing.

Additionally, Python has become a go-to language for data analysis. With data-focused libraries like pandas, NumPy, and Matplotlib, anyone familiar with Python's syntax and rules can use it as a powerful tool to process, manipulate, and visualize data.

** Task 1
You just downloaded Python 3 onto your PC.

Let's test out a simple piece of code. Run the script.py program.

** Script.py

#+begin_src python :results output
  libraries = ["NumPy", "SciPy", "Pandas", "Matplotlib", "Seaborn"]

  completion = [100, 100, 96, 0, 0]

  libraries.append("scikit-learn")
  completion.append(0)

  gradebook = list(zip(libraries, completion))

  print("Lesson Completion Rates:")
  print(gradebook)
  print("\n")

  # What's next?
  gradebook.append(("BeautifulSoup", 0))
  gradebook.append(("Tensorflow", 0))

  print("Lesson Completion Rates:")
  print(gradebook)
  print("\n")
#+end_src

#+RESULTS:
: Lesson Completion Rates:
: [('NumPy', 100), ('SciPy', 100), ('Pandas', 96), ('Matplotlib', 0), ('Seaborn', 0), ('scikit-learn', 0)]
:
:
: Lesson Completion Rates:
: [('NumPy', 100), ('SciPy', 100), ('Pandas', 96), ('Matplotlib', 0), ('Seaborn', 0), ('scikit-learn', 0), ('BeautifulSoup', 0), ('Tensorflow', 0)]
:
:

* Analyzing data with pandas
You want to know if Codecademy learners are finding what they need and need to analyze data from a survey that was administered to a subset of visitors.

You selects the survey data from the SQL database and downloads it onto your computer. You save the data as a CSV file (extension .csv), which stands for Comma-Separated Values. CSV is a text-only spreadsheet format that lets us store and explore data.

To analyze the survey data, you will use pandas. Python is a programming language, and pandas is a special set of commands in Python that lets us analyze spreadsheet data. Pandas can do a lot of the things that SQL can do, but it's also backed by the power of Python, so we can easily transition from analyzing our data with pandas to visualizing it using other Python tools.

What else does Pandas let us do?

Pandas provides a lot of useful features and functionality to work with data.

One of the most useful features of Pandas is that it provides objects known as Dataframes, which are very similar to 2D arrays of data or database tables. Dataframes are a collection of objects named "Series", which are individual columns.

With pandas and its dataframes, you can perform useful functions. As shown in the exercise, you can easily load data from a CSV file and store it as a variable in the form of a dataframe. You can also write to and create new files just as easily.

In addition, you can modify the shape of these dataframes by pivoting, add or remove from a dataframe, or merge different dataframes together.

Furthermore, you can utilize some of built-in methods that dataframes provide, such as the ~df.mean()~ method, which will return the mean value of all the columns, or ~df.max()~, which will return the highest value of each column of the dataframe.

Because of these reasons, and many others, pandas can be a very indispensable tool for data analyst.

** Task 1
You write some code to analyze your data in script.py, the file in the center of the screen.

If you press Run now, it will generate errors because it is missing this line of code:

#+begin_src python
import pandas as pd
#+end_src

Paste that code into the top of script.py and then press Run.

#+begin_src python :results output
  import pandas as pd

  # Paste code here:

  # Load data
  df = pd.read_csv('page_visits.csv')

  # Display data
  print(df.head())
#+end_src

#+RESULTS:
:   first_name last_name gender   age  visit_date          website_goal
: 0      James   Mcguire   male  50.0  2017-10-26            Find a job
: 1       John   Vaughan   male  35.0  2017-11-09            Pay a bill
: 2     Robert    Dillon   male  33.0  2017-11-28            Pay a bill
: 3    Michael   Cameron   male  40.0  2017-09-27    When is trash day?
: 4    William      Yang   male  38.0  2017-11-01  Contact City Council

* Visualizing data with matplotlib and seaborn
You want to visualize your analysis and share it with your boss. For this, you will use matplotlib, another python module.

Matplotlib let you create line charts, bar charts, pie charts, and more. It gives you precise control over colors and labels so that you can create the perfect chart to communicate your findings.

You has written some code using matplotlib that visualizes hours of usage on Codecademy!

** Task 1
You have written some code in script.py, but it won't display your new graph until you add the following code to the very end of the file:

#+begin_src python
plt.show()
#+end_src

This tells matplotlib to create and display the plot!

** Scritp.py

#+begin_src python :results output
  from matplotlib import pyplot as plt
  import numpy as np
  import pandas as pd

  hour = range(24)

  viewers_hour = [30, 17, 34, 29, 19, 14, 3, 2, 4, 9, 5, 48, 62, 58, 40, 51, 69, 55, 76, 81, 102, 120, 71, 63]

  plt.title("Codecademy Learners Time Series")

  plt.xlabel("Hour")
  plt.ylabel("Viewers")

  plt.plot(hour, viewers_hour)

  plt.legend(['2015-01-01'])

  ax = plt.subplot()

  ax.set_facecolor('seashell')

  ax.set_xticks(hour)
  ax.set_yticks([0, 20, 40, 60, 80, 100, 120])

  y_upper = [i + (i*0.15) for i in viewers_hour]
  y_lower = [i - (i*0.15) for i in viewers_hour]

  plt.fill_between(hour, y_lower, y_upper, alpha=0.2)

  # Add the code here:
  plt.show()

  #+end_src

  #+RESULTS:

* Probability
You are goin to visit the inference and machine learning teams this week. You know that both of these specialists work with probability, and want to brush up on your skills before you go, so you are going to explore a famous problem -about birthdays.

Calculating the probability of an event is sometimes dependent on external factors. For instance, in the birthday problem "What is the probability that two people in a room have the same birthday?" the probability is dependent on the number of people in the room.

Other times, the probability of something is constant. For instance, the probability of flipping a coin and it landing heads will always be 50%.

** Task 1
In data science, probability is often used to simulate scenarios.

The code below simulates  the birthday problem. Right now the code simulates a room with only two people that get random birthdays, and the probability that those 2 people have the same birthday is really low.

Change the number 2 to a higher number of your choosing where it says #Change this number and run the code.

Is there a match in the simulation? What's the probability that there would be a match?

Keep changing the number to test out different simulations.

Note that if you make the number too big, the program will throw and error due to the way we have implemented some of the math. This is a great example of needing to be mindful of possible inputs to your program!

** Script.py

#+begin_src python :results output
  # We have hidden code in another file. If you're curious, open the folder to the left and inspect the simulate.py file
  from simulate import simulate

  num_people_in_room = 120 #Change This Number (keep it smaller than 100 to save processing power)

  simulate(num_people_in_room)

#+end_src

#+RESULTS:
#+begin_example
Here's what our room looks like:

Person 1's birthday: September 2
Person 2's birthday: January 26
Person 3's birthday: January 4
Person 4's birthday: October 4
Person 5's birthday: March 20
Person 6's birthday: May 23
Person 7's birthday: April 19
Person 8's birthday: November 17
Person 9's birthday: March 3
Person 10's birthday: October 30
Person 11's birthday: February 24
Person 12's birthday: February 14
Person 13's birthday: October 26
Person 14's birthday: April 22
Person 15's birthday: January 22
Person 16's birthday: April 16
Person 17's birthday: August 20
Person 18's birthday: July 27
Person 19's birthday: November 9
Person 20's birthday: February 4
Person 21's birthday: April 8
Person 22's birthday: March 22
Person 23's birthday: November 14
Person 24's birthday: June 12
Person 25's birthday: September 5
Person 26's birthday: June 28
Person 27's birthday: November 16
Person 28's birthday: January 12
Person 29's birthday: November 1
Person 30's birthday: October 27
Person 31's birthday: October 11
Person 32's birthday: December 27
Person 33's birthday: December 18
Person 34's birthday: December 7
Person 35's birthday: October 14
Person 36's birthday: April 6
Person 37's birthday: July 20
Person 38's birthday: July 11
Person 39's birthday: September 24
Person 40's birthday: September 20
Person 41's birthday: November 10
Person 42's birthday: September 6
Person 43's birthday: November 21
Person 44's birthday: June 8
Person 45's birthday: July 6
Person 46's birthday: May 2
Person 47's birthday: November 12
Person 48's birthday: July 5
Person 49's birthday: June 10
Person 50's birthday: December 16
Person 51's birthday: November 17
Person 52's birthday: February 23
Person 53's birthday: January 5
Person 54's birthday: May 7
Person 55's birthday: September 6
Person 56's birthday: April 20
Person 57's birthday: September 9
Person 58's birthday: December 1
Person 59's birthday: August 14
Person 60's birthday: July 19
Person 61's birthday: November 27
Person 62's birthday: November 13
Person 63's birthday: June 25
Person 64's birthday: March 30
Person 65's birthday: December 6
Person 66's birthday: August 7
Person 67's birthday: February 12
Person 68's birthday: April 26
Person 69's birthday: September 6
Person 70's birthday: December 22
Person 71's birthday: July 8
Person 72's birthday: May 18
Person 73's birthday: January 9
Person 74's birthday: July 29
Person 75's birthday: June 15
Person 76's birthday: January 27
Person 77's birthday: January 3
Person 78's birthday: August 29
Person 79's birthday: June 22
Person 80's birthday: February 27
Person 81's birthday: September 22
Person 82's birthday: January 20
Person 83's birthday: July 13
Person 84's birthday: December 22
Person 85's birthday: March 13
Person 86's birthday: September 24
Person 87's birthday: May 3
Person 88's birthday: November 13
Person 89's birthday: January 2
Person 90's birthday: September 19
Person 91's birthday: February 27
Person 92's birthday: April 30
Person 93's birthday: May 16
Person 94's birthday: November 28
Person 95's birthday: May 25
Person 96's birthday: October 4
Person 97's birthday: May 6
Person 98's birthday: June 18
Person 99's birthday: August 2
Person 100's birthday: April 20
Person 101's birthday: October 13
Person 102's birthday: November 12
Person 103's birthday: September 12
Person 104's birthday: October 7
Person 105's birthday: October 23
Person 106's birthday: November 22
Person 107's birthday: May 7
Person 108's birthday: July 3
Person 109's birthday: June 18
Person 110's birthday: November 2
Person 111's birthday: June 11
Person 112's birthday: December 22
Person 113's birthday: March 9
Person 114's birthday: June 18
Person 115's birthday: June 27
Person 116's birthday: September 18
Person 117's birthday: January 23
Person 118's birthday: February 16
Person 119's birthday: February 2
Person 120's birthday: February 4


The probability that two people in a room of 120 people have the same birthday is nearly 100.0%


In our simulation, the following people have the same birthdays:
Person 96
Person 4
#+end_example
