
* Build a Book Recommender System
Recommender systems are used in all sorts of organizations to help users make decisions and, for many companies, earn more revenue. Prototyping simple recommender systems also does not need to take a lot of time. In this project, we will build a book recommender system for Books'R'Us using Surprise.

Books'R'Us is a national bookstore chain that sells books of all sorts to people all over the country. They recently have built their website, an now want to add a book recommender system to their site. We will prepare and train the recommender system using book review data left on their site. This data has been put together in a Pandas DataFrame called ~book_ratings~.

** Prepare your data for recommender implementation

*** Task 1
Take a sneak peek into the dataset by printing the first five rows. How big is the data set? What are the data types of the different fields?

*Hint*
Use ~.head()~ to print the first 5 rows and ~.describe()~ or ~.info()~ to obtain a quick summary of the dataset.

*** Task 2
In order to understand these ratings, let's look at a count of all the ratings in the data. Examine the distribution of the ratings using ~value_counts~.

*Hint*
Use ~book_ratings['rating'].value_counts()~.

*** Task 3
Unfortunately, it appears we have some data where the ratings are 0. The ratings on the website only go from 1 to 5 inclusive. Filter out all ratings that are not in this range.

*Hint*
You can filter for ~book_ratings['rating']!=0~.

*** Task 4
We need to prepare this data for use in Surprise. First, build a Surprise ~reader~ Object that utilizes the rating scale established above. Look at the [[https://surprise.readthedocs.io/en/stable/index.html][Surprise documentation]] to help you out.

*Hint*
Documentation on the ~reader~ class is available [[https://surprise.readthedocs.io/en/stable/reader.html][here]].


** Script.py

#+begin_src python :results output
  import pandas as pd
  from surprise import Reader

  book_ratings = pd.read_csv('goodreads_ratings.csv')
  print(book_ratings.head())

  #1. Print dataset size and examine colum data types
  print(len(book_ratings))
  print(book_ratings.info())

  #2. Distribution of ratings
  print(book_ratings['rating'].value_counts())

  #3. Filter ratings that are out of range
  book_ratings = book_ratings['rating']!=0

  #4. Prepare data for Surprise: build a Surprise reader object
  from surprise import Reader
  reader = Reader(rating_scale=(1, 5))

#+end_src

#+RESULTS:
#+begin_example
                            user_id   book_id  ... n_votes  n_comments
0  d089c9b670c0b0b339353aebbace46a1   7686667  ...       0           0
1  6dcb2c16e12a41ae0c6c38e9d46f3292  18073066  ...      16          14
2  244e0ce681148a7586d7746676093ce9  13610986  ...       0           0
3  73fcc25ff29f8b73b3a7578aec846394  27274343  ...       0           1
4  f8880e158a163388a990b64fec7df300  11614718  ...       0           0

[5 rows x 11 columns]
3500
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3500 entries, 0 to 3499
Data columns (total 11 columns):
 #   Column        Non-Null Count  Dtype
---  ------        --------------  -----
 0   user_id       3500 non-null   object
 1   book_id       3500 non-null   int64
 2   review_id     3500 non-null   object
 3   rating        3500 non-null   int64
 4   review_text   3500 non-null   object
 5   date_added    3500 non-null   object
 6   date_updated  3500 non-null   object
 7   read_at       3167 non-null   object
 8   started_at    2395 non-null   object
 9   n_votes       3500 non-null   int64
 10  n_comments    3500 non-null   int64
dtypes: int64(4), object(7)
memory usage: 300.9+ KB
None
rating
4    1278
5    1001
3     707
2     269
1     125
0     120
Name: count, dtype: int64
#+end_example
