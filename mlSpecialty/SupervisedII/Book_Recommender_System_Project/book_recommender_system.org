
* Build a Book Recommender System
Recommender systems are used in all sorts of organizations to help users make decisions and, for many companies, earn more revenue. Prototyping simple recommender systems also does not need to take a lot of time. In this project, we will build a book recommender system for Books'R'Us using Surprise.

Books'R'Us is a national bookstore chain that sells books of all sorts to people all over the country. They recently have built their website, an now want to add a book recommender system to their site. We will prepare and train the recommender system using book review data left on their site. This data has been put together in a Pandas DataFrame called ~book_ratings~.

** Prepare your data for recommender implementation

*** Task 1
Take a sneak peek into the dataset by printing the first five rows. How big is the data set? What are the data types of the different fields?

*Hint*
Use ~.head()~ to print the first 5 rows and ~.describe()~ or ~.info()~ to obtain a quick summary of the dataset.

*** Task 2
In order to understand these ratings, let's look at a count of all the ratings in the data. Examine the distribution of the ratings using ~value_counts~.

*Hint*
Use ~book_ratings['rating'].value_counts()~.

*** Task 3
Unfortunately, it appears we have some data where the ratings are 0. The ratings on the website only go from 1 to 5 inclusive. Filter out all ratings that are not in this range.

*Hint*
You can filter for ~book_ratings['rating']!=0~.

*** Task 4
We need to prepare this data for use in Surprise. First, build a Surprise ~reader~ Object that utilizes the rating scale established above. Look at the [[https://surprise.readthedocs.io/en/stable/index.html][Surprise documentation]] to help you out.

*Hint*
Documentation on the ~reader~ class is available [[https://surprise.readthedocs.io/en/stable/reader.html][here]].

** Build a recommender system using Surprise

*** Task 5
Load ~book_ratings~ into a ~Surprise~ Dataset so it can be used with ~Surprise~'s algorithms.

*Hint*
Recall that the ~Dataset~ module within ~Surprise~ has a ~load_from_df~ function that takes in a DataFrame with three columns -one representing a user ID, an item ID and a rating respectively.

*** Task 6
We have a dataset that is ready for use in ~Surprise~. Split the data, and put 80% of the data into a training set, and 20% into a test set. Set a ~random_state~ of 7 to improve reproducibility.

*Hint*
Similar to ~scikit-learn~, you can import ~train_test_split~ from ~surprise.model_selection~.

*** Task 7
We can finally train a recommender system. Use the ~KNNBasic~ from Surprise to train a collaborative filter using the training set.

*Hint*
Import the algorithm ~KNNBasic~ from ~surprise~ and use ~.fit()~ to fit the training set.

*** Task 8
How good is the algorithm we trained? Calculate the RMSE of the recommender system using the ~testset~ data.

*** Task 9
Time to get a recommendation! User ~8842281e1d1347389f2ab93d60773d4d~ gave the science-fiction book “The Three-Body Problem” (book_id= ~18245960~) a 5. What rating does the algorithm predict this user will give the science-fiction book “The Martian” (book_id= ~18007564~)?

*** Task 10
We have successfully built a working prototype for a recommender system. Try adjusting the hyperparameters of the collaborative filter you built, and see if you can reduce the RMSE of the collaborative filter you built above.


** Script.py

#+begin_src python :results output
  import pandas as pd
  from surprise import Reader

  book_ratings = pd.read_csv('goodreads_ratings.csv')
  print(book_ratings.head())

  #1. Print dataset size and examine column data types
  print(len(book_ratings))
  print(book_ratings.info())

  #2. Distribution of ratings
  print(book_ratings['rating'].value_counts())

  #3. Filter ratings that are out of range
  book_ratings = book_ratings[book_ratings['rating']!=0]

  #4. Prepare data for surprise: build a Suprise reader object
  from surprise import Reader
  reader = Reader(rating_scale=(1, 5))

  #5. Load `book_ratings` into a Surprise Dataset
  from surprise import Dataset
  rec_data = Dataset.load_from_df(book_ratings[['user_id',
                                                'book_id',
                                                'rating']],
                                  reader)

  #6. Create a 80:20 train-test split and set the random state to 7
  from surprise.model_selection import train_test_split
  trainset, testset = train_test_split(rec_data, test_size=.2, random_state=7)

  #7. Use KNNBasic from Surprise to train a collaborative filter
  from surprise import KNNBasic
  nn_algo = KNNBasic()
  nn_algo.fit(trainset)

  #8. Evaluate the recommender system
  from surprise import accuracy
  predictions = nn_algo.test(testset)
  accuracy.rmse(predictions)

  #9. Prediction on a user who gave the "The Three-Body Problem" a rating of 5
  print(nn_algo.predict('8842281e1d1347389f2ab93d60773d4d', '18007564').est)

#+end_src

#+RESULTS:
#+begin_example
                            user_id   book_id  ... n_votes  n_comments
0  d089c9b670c0b0b339353aebbace46a1   7686667  ...       0           0
1  6dcb2c16e12a41ae0c6c38e9d46f3292  18073066  ...      16          14
2  244e0ce681148a7586d7746676093ce9  13610986  ...       0           0
3  73fcc25ff29f8b73b3a7578aec846394  27274343  ...       0           1
4  f8880e158a163388a990b64fec7df300  11614718  ...       0           0

[5 rows x 11 columns]
3500
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3500 entries, 0 to 3499
Data columns (total 11 columns):
 #   Column        Non-Null Count  Dtype
---  ------        --------------  -----
 0   user_id       3500 non-null   object
 1   book_id       3500 non-null   int64
 2   review_id     3500 non-null   object
 3   rating        3500 non-null   int64
 4   review_text   3500 non-null   object
 5   date_added    3500 non-null   object
 6   date_updated  3500 non-null   object
 7   read_at       3167 non-null   object
 8   started_at    2395 non-null   object
 9   n_votes       3500 non-null   int64
 10  n_comments    3500 non-null   int64
dtypes: int64(4), object(7)
memory usage: 300.9+ KB
None
rating
4    1278
5    1001
3     707
2     269
1     125
0     120
Name: count, dtype: int64
Computing the msd similarity matrix...
Done computing similarity matrix.
RMSE: 1.1105
3.8250739644970415
#+end_example
