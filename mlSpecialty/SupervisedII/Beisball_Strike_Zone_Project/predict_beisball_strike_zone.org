
* Predict Baseball Strike Zones With Machine Learning
Support Vector Machines are powerful machine learning models that can make complex decision boundaries. An SVM's decision boundary can twist and curve to accommodate the training data.

In this project, we will use an SVM trained using a baseball dataset to find the decision boundary of the strike zone.

[[./strike_zone.png]]

The strike zone can be thouhgt of as a decision boundary that determines whether or not a pitch is a strike or a ball. There is a strict definition of the strike zone -in practice, however, it will vary depending on the unpire or the player at bat.

Let's use our knowledge of SVMs to find the /real/ strike zone of several baseball players.

** Create the labels

*** Task 1
We've imported several DataFrames related to some of baseball's biggest stars. We have data on Aaron Judge and Jose Altuve. Judge is one of the tallest players in the league and Altuve is one of the shortest. Their strike zones should be pretty different.

Each row in these DataFrames corresponds to a single pitch that the batter saw in the 2017 season. To begin, let's take a look at all of the features of a pitch. Print ~aaron_judge.columns~.

In this project, we'll ask you to print out a lot of information. To avoid clutter, feel free to delete the print statements once you understand the data.

We used the [[https://github.com/jldbc/pybaseball][pybaseball]] Python package to get the data for this project. If you're interested in getting more data, the documentation for pybaseball can help you get data that you're interested onto your own computer.

*** Task 2
Some of these features have obscure names. Let's learn what the feature ~description~ means.

Print ~aaron_judge.description.unique()~ to see the different values the description feature could have.

*** Task 3
We're interested in looking at whether a pitch was a ball or a strike. That information is stored in the ~type~ feature. Look at the unique values stored in the ~type~ feature. Look at the unique values stored in the ~type~ feature to get a sense of how balls and strikes are recorded.

*** Task 4
Great! We know every row's ~type~ features is either an ~'S'~ for a strike, a ~'B'~ for a ball, or an ~'X'~ for neither (for example, an ~'X'~ could be a hit or an out).

We'll want to use this feature as the label of our data points. However, instead of using strings, it will be easier if we change every ~'S'~ to a ~1~ and every ~'B'~ to a ~0~.

#+begin_src python
  df['example_column'] = df['example_column'].map({'A':1, 'B':2})
#+end_src

*** Task 5
Let's make sure that worked. Print the ~type~ column from the ~aaron_judge~ DataFrame.

** Plotting the pitches

*** Task 6
There were some ~NaN~'s in there. We'll take care of those in a second. For now, let's look at the other features we're interested in.

We want to predict whether a pitch is a ball or a strike based on its location over the plate. You can find the ball's location in the columns ~plate_x~ and ~plate_z~.

Print ~aaron_judge['plate_x']~ to see what that column looks like.

~plate_x~ measures how far left or right the pitch is form the center of home plate. If ~plate_x = 0~, that means the pitch was directly in the middle of the home plate.

*** Task 7
We now have the three columns we want to work with: ~'plate_x', 'plate_z', and 'type'~.

Let's remove every row that has a ~NaN~ in any of those columns.

You can do this by calling the ~dropna~ function. This function can take a parameter named ~subset~ which should be a list of the columns you're interested in.

For example, the following code drops all of the ~NaN~ values from the columns 'A', 'B', and 'C'.

#+begin_src python
  data_frame = data_frame.dropna(subset = ['A', 'B', 'C'])
#+end_src

*** Task 8
We now have points to plot using Matplotlib. Call ~plt.scatter()~ using five parameters:

    - The parameter ~x~ should be the ~plate_x~ column.

    - The parameter ~y~ should be the ~plate_z~ column.

    - To color the points correctly, the parameter ~c~ should be the ~type~ column.

    - To make the strikes red and the balls blue, set ~cmap~ parameter to ~plt.cm.coolwarm~.

    - To make the points slightly transparent, set the ~alpha~ parameter to ~0.25~.

Call ~plt.show~ to see your graph.

~plate_z~ measures how high off the ground the pitch was. If ~plate_z = 0~ that means the pitch was at ground level when it got to the home plate.

** Script.py
#+begin_src python :results output
  import matplotlib.pyplot as plt
  import pandas as pd
  from sklearn.svm import SVC
  from sklearn.model_selection import train_test_split
  from svm_visualization import draw_boundary
  from players import aaron_judge, jose_altuve, david_ortiz

  fig, ax = plt.subplots()

  #print(aaron_judge.head())

  #print(aaron_judge.columns)

  #print(aaron_judge.description.unique())
  #print(aaron_judge.type.unique())

  aaron_judge['type'] = aaron_judge['type'].map({'S':1, 'B':0})
  jose_altuve['type'] = jose_altuve['type'].map({'S':1, 'B':0})
  david_ortiz['type'] = david_ortiz['type'].map({'S':1, 'B':0})

  #print(aaron_judge['type'])

  #print(aaron_judge['plate_x'])

  aaron_judge = aaron_judge.dropna(subset=['plate_x', 'plate_z', 'type'])
  jose_altuve = jose_altuve.dropna(subset=['plate_x', 'plate_z', 'type'])
  david_ortiz = david_ortiz.dropna(subset=['plate_x', 'plate_z', 'type'])

  print(aaron_judge.type.unique())

  plt.scatter(x = aaron_judge['plate_x'],
              y = aaron_judge['plate_z'],
              c = aaron_judge['type'],
              cmap = plt.cm.coolwarm,
              alpha = 0.5)
  plt.title('Aaron Judge - tallest')
  plt.xlabel('how far left or right from center')
  plt.ylabel('how high off the ground')
  plt.show()

  plt.scatter(x = jose_altuve['plate_x'],
              y = jose_altuve['plate_z'],
              c = jose_altuve['type'],
              cmap = plt.cm.coolwarm,
              alpha = 0.5)
  plt.title('Jose Altuve - shortest')
  plt.xlabel('how far left or right from center')
  plt.ylabel('how high off the ground')
  plt.show()

  plt.scatter(x = david_ortiz['plate_x'],
              y = david_ortiz['plate_z'],
              c = david_ortiz['type'],
              cmap = plt.cm.coolwarm,
              alpha = 0.5)
  plt.title('David Ortiz - average')
  plt.xlabel('how far left or right from center')
  plt.ylabel('how high off the ground')
  plt.show()


#+end_src

#+RESULTS:
: [1. 0.]
